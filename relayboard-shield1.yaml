# This file is a sample to use your ESP12F_Relay_X4 board with
# ESPhome (esphome.io)
# and
# Home Assistant (home-assistant.io)
#
# Simply add your wifi credentials and run from the command line
# esphome.py relayboard.yaml run
# or use this file as a sample when building yours in the
# Home Assistant ESPhome add-on
esphome:
  name: relayboard-shield1
  on_boot:
    priority: 500 # 600: This is where most sensors are set up.
    then:
      - delay: 10s
      - logger.log: "Booted ON"
      - switch.turn_on: booted

esp8266:
  board: esp12e
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "RelayboardShield1 Hotspot"
    password: !secret fallback_pass

captive_portal:

# Enable logging
logger:
  baud_rate: 0 #need this to free up UART pins

# Enable Home Assistant API
api:

# Enable over-the-air flashing
ota:

# Use the blue LED in the device as a status LED, which will blink if there are warnings (slow) or errors (fast)
status_led:
  pin:
    number: GPIO5
    inverted: True
    
i2c:
  sda: GPIO14
  scl: GPIO13
  scan: true
  frequency: 400kHz
  
mcp23017:
  - id: mcp
    address: 0x20

binary_sensor:
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 0
       mode:
         input: true
         pullup: true
       inverted: true
     name: pin0
     filters:
       - delayed_off: 200ms
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 1
       mode:
         input: true
         pullup: true
       inverted: true
     name: pin1
     filters:
       - delayed_off: 200ms
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 2
       mode:
         input: true
         pullup: true
       inverted: true
     name: pin2
     filters:
       - delayed_off: 200ms
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 3
       mode:
         input: true
         pullup: true
       inverted: true
     name: pin3
     filters:
       - delayed_off: 200ms
   # Interruptor Garaje
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 4
       mode:
         input: true
         pullup: true
       inverted: true
     name: pin4
     filters:
       - delayed_off: 200ms
     on_state:
       - switch.toggle: pin11
   # Interruptor Entrada 1
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 5
       mode:
         input: true
         pullup: true
       inverted: true
     name: pin5
     filters:
       - delayed_off: 200ms
     on_state:
       then:
         - logger.log: "Cambio en entrada 1"
         - if:
             condition:
               - switch.is_off: pin10
             then:
               - button.press: programa1
             else:
               - switch.turn_off: pin10
   # Interruptor Entrada 2
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 6
       mode:
         input: true
         pullup: true
       inverted: true
     name: pin6
     filters:
       - delayed_off: 200ms
     on_state:
       then:
         - logger.log: "Cambio en entrada 2"
         - if:
             condition:
               - switch.is_off: pin10
             then:
               - button.press: programa2
             else:
               - switch.turn_off: pin10
# pin 7 not connected

   - platform: template
     internal: true
     id: toff1
     lambda: |-
       return id(pin10).state;
     filters:
       - delayed_on: 3600s
     on_press:
       then:
         switch.turn_off: pin10
   - platform: template
     internal: true
     id: toff2
     lambda: |-
       return id(pin9).state;
     filters:
       - delayed_on: 3600s
     on_press:
       then:
         switch.turn_off: pin9
   - platform: template
     internal: true
     id: toff3
     lambda: |-
       return id(pin11).state;
     filters:
       - delayed_on: 1800s
     on_press:
       then:
         - if:
            condition:
              - switch.is_on: auto_off_luz
            then:
              - switch.turn_off: pin11
   - platform: template
     internal: true
     id: toff4
     lambda: |-
       return id(pin11).state;
     filters:
       - delayed_on: 18000s
     on_press:
       then:
         - switch.turn_off: pin11






# Four relay outputs, exposed as switches in Home Assistant
switch:
   # Relé 4
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 8
       mode:
         output: true
       inverted: false
     name: pin8
     id: pin8
     restore_mode: ALWAYS_OFF
   # Luz fuente
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 9
       mode:
         output: true
       inverted: false
     name: pin9
     id: pin9
     restore_mode: ALWAYS_OFF
   # Motor Fuente
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 10
       mode:
         output: true
       inverted: false
     name: pin10
     id: pin10
     restore_mode: ALWAYS_OFF
     on_turn_off:
       - switch.turn_off: pin9 # Apagar la luz al apagar la fuente
   # Luz garaje
   - platform: gpio
     pin:
       mcp23xxx: mcp
       number: 11
       mode:
         output: true
       inverted: false
     name: pin11
     id: pin11
     restore_mode: ALWAYS_OFF
# pins 12-15 not connected
   - platform: template
     optimistic: true
     restore_mode: ALWAYS_OFF
     id: booted
   - platform: template
     name: Apagado auto luz garaje
     id: auto_off_luz
     entity_category: config
     optimistic: True
     restore_mode: RESTORE_DEFAULT_ON

sensor:
  # OPTIONAL, if you want to monitor the device's wifi signal from Home Assistant
  - platform: wifi_signal
    name: "Señal WiFi"
    update_interval: 60s
  # OPTIONAL, if you are planning to connect an analog sensor to ADC input.
  # IMPORTANT: The ADC input only supports signals between 0V-1V.
  # Do not exceed this range if you don't want to fry your device.
#  - platform: adc
#    pin: A0
#    name: "Analog input"
#    update_interval: 60s
  - platform: template
    id: remaining_time1
    name: Restante Fuente
    icon: mdi:timer
    unit_of_measurement: s
    accuracy_decimals: 0

interval:
  - interval: 5s
    then:
      - lambda: |-
          if (id(remaining_time1).state > 0 && id(pin10).state) {
              // Decrement the timer.
              if (id(remaining_time1).state <= 5) {
                id(pin10).turn_off();
                id(remaining_time1).publish_state(0);
              } else {
                id(remaining_time1).publish_state(id(remaining_time1).state - 5);
              }
          }

button:
  - platform: template
    name: Iniciar Programa 1
    id: programa1
    on_press:
      then:
       - if:
          condition:
            - switch.is_on: booted
          then:     
            - sensor.template.publish:
                id: remaining_time1
                state: !lambda 'return id(dur1).state * 60;'
            - switch.turn_on: pin10
  - platform: template
    name: Iniciar Programa 2
    id: programa2
    on_press:
      then:
       - if:
          condition:
            - switch.is_on: booted
          then:     
            - sensor.template.publish:
                id: remaining_time1
                state: !lambda 'return id(dur2).state * 60;'
            - switch.turn_on: pin10
number:
  - platform: template
    name: Duracion Programa 1
    id: dur1
    entity_category: config
    max_value: 50
    min_value: 0
    step: 2
    initial_value: 10
    optimistic: True
    restore_value: True
    unit_of_measurement: min
  - platform: template
    name: Duracion Programa 2
    id: dur2
    entity_category: config
    max_value: 50
    min_value: 0
    step: 2
    initial_value: 30
    optimistic: True
    restore_value: True
    unit_of_measurement: min

