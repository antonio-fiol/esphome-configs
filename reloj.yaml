esphome:
  name: reloj

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Reloj Fallback Hotspot"
    password: !secret fallback_pass

captive_portal:

web_server:

time:
  - platform: sntp
    id: sntp_time
    on_time_sync: 
      then:
        - delay: 1s
        - light.turn_on:
            id: arointerior
            brightness: 0.4
            effect: "Minuto Encendido Segundo Rojo Import-export Plus"

        - light.turn_on: 
            id: aroexterior
            brightness: 0.4
            effect: "Hora Encendida"

sensor:
  - platform: homeassistant
    entity_id: sensor.template_grid_import_power
    id: im_pwr
  - platform: homeassistant
    entity_id: sensor.template_grid_export_power
    id: ex_pwr

binary_sensor:
  # Known consumption devices
  - platform: homeassistant
    entity_id: switch.radiador750w
    id: radiador750w
  - platform: homeassistant
    entity_id: switch.radiador1250w
    id: radiador1250w

light:
  - platform: partition
    id: aux
    segments:
      - id: arointerior61
        from: 1
        to: 60
        reversed: true

  - platform: partition
    name: "AroInterior"
    id: arointerior
    segments:
      - id: aux
        from: 2
        to: 59
      - id: aux
        from: 0
        to: 1
    effects:
      - addressable_lambda:
         name: "Minuto Negro Segundo Rojo"
         update_interval: 1000ms
         lambda: |-
            static Color rojo = Color(255,0,0,0);
            auto ahora = id(sntp_time).now();
            it.all() = current_color;
            it[ahora.second] = rojo;
            it[ahora.minute] = Color::BLACK;

      - addressable_lambda:
         name: "Minuto Encendido Segundo Rojo"
         update_interval: 1000ms
         lambda: |-
            static Color rojo = Color(255,0,0,0);
            auto ahora = id(sntp_time).now();
            it.all() = Color::BLACK;
            it[ahora.second] = rojo;
            it[ahora.minute] = current_color;

      - addressable_lambda:
         name: "Minuto Negro Segundo Negro"
         update_interval: 1000ms
         lambda: |-
            auto ahora = id(sntp_time).now();
            it.all() = current_color;
            it[ahora.second] = Color::BLACK;
            it[ahora.minute] = Color::BLACK;
      - addressable_lambda:
         name: "Minuto Negro Segundo Random"
         update_interval: 1000ms
         lambda: |-
            auto ahora = id(sntp_time).now();
            it.all() = current_color;
            it[ahora.second] = Color::random_color();
            it[ahora.minute] = Color::BLACK;

      - addressable_lambda:
         name: "Minuto Encendido Segundo Rojo Import-export"
         update_interval: 1000ms
         lambda: |-
            static Color rojo = Color(255,0,0,0);
            static Color verde = Color(0,127,0,0);
            static Color naranja = Color(159,79,0,0);
            auto ahora = id(sntp_time).now();
            float f_ex = id(ex_pwr).state;
            float f_im = id(im_pwr).state;
            if(! (f_ex>0 || f_im>0) ) return;
            int expwr = int(f_ex / 200.0);
            int impwr = int(f_im / 200.0);
            //if(ahora.second % 5 == 0) ESP_LOGD("lambda", "Export: %d   Import: %d", expwr, impwr);
            it.all() = Color::BLACK;
            if(expwr>0 && expwr<40) do {
              it[(ahora.second+expwr)%60] = verde;
            } while(expwr-- > 0);
            if(impwr>0 && impwr<40) do {
              it[(60+ahora.second-impwr)%60] = naranja;
            } while(impwr-- > 0);
            it[ahora.second] = rojo;
            it[ahora.minute] = current_color;

      - addressable_lambda:
         name: "Minuto Encendido Segundo Rojo Import-export Plus"
         update_interval: 1000ms
         lambda: |-
            static Color rojo = Color(255,0,0,0);
            static Color verde = Color(0,127,0,0);
            static Color naranja = Color(159,79,0,0);
            static Color azul = Color(0,0,159,0);
            auto ahora = id(sntp_time).now();
            float f_ex = id(ex_pwr).state;
            float f_im = id(im_pwr).state;
            //if(ahora.second % 5 == 0) ESP_LOGD("lambda", "f_ex: %f   f_im: %f", f_ex, f_im);
            if(!(f_ex>0 || f_im>0)) { f_ex = f_im = 250.0; }
            int expwr = int(f_ex / 200.0);
            int impwr = int(f_im / 200.0);
            //if(ahora.second % 5 == 0) ESP_LOGD("lambda", "Export: %d   Import: %d", expwr, impwr);
            it.all() = Color::BLACK;
            int seg_azul = (id(radiador750w).state?3:0)+(id(radiador1250w).state?5:0);
            if(seg_azul) {
              int offset = (expwr > 0 && expwr<40)?expwr:1;
              do {
                it[(ahora.second+offset+seg_azul)%60] = azul;             
              } while(seg_azul-- > 0);
            }
            if(expwr>0 && expwr<40) do {
              it[(ahora.second+expwr)%60] = verde;
            } while(expwr-- > 0);
            if(impwr>0 && impwr<40) do {
              it[(60+ahora.second-impwr)%60] = naranja;
            } while(impwr-- > 0);
            it[ahora.second] = rojo;
            it[ahora.minute] = current_color;

  - platform: partition
    name: "AroExterior"
    id: aroexterior
    segments:
      - id: aroexterior36
        from: 0
        to: 35
        reversed: true
    effects:
      - addressable_lambda:
         name: "Hora Negro"
         update_interval: 1000ms
         lambda: |-
           auto ahora = id(sntp_time).now();
           it.all() = current_color;
           it[0+(ahora.hour%12)*3] = Color::BLACK;
           it[1+(ahora.hour%12)*3] = Color::BLACK;
           it[2+(ahora.hour%12)*3] = Color::BLACK;
      - addressable_lambda:
         name: "Hora Encendida"
         update_interval: 1000ms
         lambda: |-
           auto ahora = id(sntp_time).now();
           it.all() = Color::BLACK;
           it[0+(ahora.hour%12)*3] = current_color;
           it[1+(ahora.hour%12)*3] = current_color;
           it[2+(ahora.hour%12)*3] = current_color;
      - addressable_lambda:
         name: "Hora Random"
         update_interval: 1000ms
         lambda: |-
           auto ahora = id(sntp_time).now();
           it.all() = current_color;
           auto c = Color::random_color();
           it[0+(ahora.hour%12)*3] = c;
           it[1+(ahora.hour%12)*3] = c;
           it[2+(ahora.hour%12)*3] = c;


  - platform: neopixelbus
    type: GRBW
    variant: WS2812
    pin: GPIO27
    num_leds: 61
    id: arointerior61
    method:
      type: esp32_i2s
      bus: 0
    
  - platform: neopixelbus
    type: GRBW
    variant: WS2812
    pin: GPIO25
    num_leds: 36
    id: aroexterior36
    method:
      type: esp32_i2s
      bus: 1
